/* soapSAHBindingProxy.h
   Generated by gSOAP 2.7.12 from webserver.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapSAHBindingProxy_H
#define soapSAHBindingProxy_H
#include "soapH.h"

#include <stdlib.h>
using namespace std;

class SOAP_CMAC SAHBindingProxy : public soap
{ public:
	/// Endpoint URL of service 'SAHBindingProxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	SAHBindingProxy();
	/// Constructor with copy of another engine state
	SAHBindingProxy(const struct soap&);
	/// Constructor with engine input+output mode control
	SAHBindingProxy(soap_mode iomode);
	/// Constructor with engine input and output mode control
	SAHBindingProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~SAHBindingProxy();
	/// Initializer used by constructor
	virtual	void SAHBindingProxy_init(soap_mode imode, soap_mode omode);
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Force close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
	virtual	void soap_stream_fault(std::ostream&);
	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'echo' (returns error code or SOAP_OK)
	virtual	int echo(std::string str, std::string &return_);

	/// Web service operation 'getServerTimestamp' (returns error code or SOAP_OK)
	virtual	int getServerTimestamp(time_t &return_);

	/// Web service operation 'getAvailableDevicesIDs' (returns error code or SOAP_OK)
	virtual	int getAvailableDevicesIDs(struct ns1__getAvailableDevicesIDsResponse &_param_1);

	/// Web service operation 'getDeviceOverviewData' (returns error code or SOAP_OK)
	virtual	int getDeviceOverviewData(std::string deviceID, std::string locale, struct ns1__getDeviceOverviewDataResponse &_param_2);

	/// Web service operation 'getDeviceOverviewExtendedData' (returns error code or SOAP_OK)
	virtual	int getDeviceOverviewExtendedData(std::string deviceID, std::string locale, struct ns1__getDeviceOverviewExtendedDataResponse &_param_3);

	/// Web service operation 'getAllDevicesOverviewData' (returns error code or SOAP_OK)
	virtual	int getAllDevicesOverviewData(std::string locale, struct ns1__getAllDevicesOverviewDataResponse &_param_4);

	/// Web service operation 'getAllDevicesOverviewExtendedData' (returns error code or SOAP_OK)
	virtual	int getAllDevicesOverviewExtendedData(std::string locale, struct ns1__getAllDevicesOverviewExtendedDataResponse &_param_5);

	/// Web service operation 'invokeAction' (returns error code or SOAP_OK)
	virtual	int invokeAction(std::string deviceID, std::string actionName, ArrayOfString *parameters, struct ns1__invokeActionResponse &_param_6);

	/// Web service operation 'getLastDevicesEvents' (returns error code or SOAP_OK)
	virtual	int getLastDevicesEvents(time_t since, std::string lang, struct ns1__getLastDevicesEventsResponse &_param_7);

	/// Web service operation 'getDeviceStateVariables' (returns error code or SOAP_OK)
	virtual	int getDeviceStateVariables(std::string deviceID, ArrayOfString *variableNames, struct ns1__getDeviceStateVariablesResponse &_param_8);

	/// Web service operation 'getDeviceAvailableActions' (returns error code or SOAP_OK)
	virtual	int getDeviceAvailableActions(std::string deviceID, struct ns1__getDeviceAvailableActionsResponse &_param_9);
};
#endif
